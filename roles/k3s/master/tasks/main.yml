---
- name: Download helm tar to first master which will be our control node
  ansible.builtin.get_url:
    url: https://get.helm.sh/helm-{{ helm_version }}-linux-{{ arch }}.tar.gz
    checksum: sha256:https://get.helm.sh/helm-{{ helm_version }}-linux-{{ arch }}.tar.gz.sha256sum
    dest: /tmp/helm.tar.gz
    owner: root
    group: root
    mode: 0644
  vars:
    arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}"
  register: helm_downloaded
  until: helm_downloaded is not failed
  retries: 5
  when: inventory_hostname == groups['master'][0]

- name: Extract the helm binary
  ansible.builtin.unarchive:
    src: /tmp/helm.tar.gz
    dest: /usr/local/bin
    remote_src: yes
    owner: root
    group: root
    mode: 0755
    extra_opts:
      - linux-amd64/helm
      - --strip-components=1
  when: inventory_hostname == groups['master'][0]

- name: Get K3s installation script
  get_url:
    url: https://get.k3s.io
    dest: /tmp/k3s_install.sh
    mode: '0755'

- name: Create K3S configuration directory
  file:
    path: "{{ k3s_config_directory }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Copy kubelet configuration file
  copy:
    dest: "{{ k3s_config_directory }}/kubelet.config"
    content: "{{ k3s_kubelet_config }}"
    owner: root
    group: root
    mode: 0644

- name: Create manifests directory on first master
  file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['master'][0]]['ansible_hostname']

- name: Copy vip rbac manifest to first master
  template:
    src: "vip.rbac.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/vip-rbac.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['master'][0]]['ansible_hostname']

- name: Copy vip manifest to first master
  template:
    src: "vip.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/vip.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['master'][0]]['ansible_hostname']

- name: Install k3s on 1st master
  command: "/tmp/k3s_install.sh server {{ server_args }}"
  environment:
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  register: first_master_ready
  changed_when: true
  until: first_master_ready is not failed
  retries: 5
  when: inventory_hostname == groups['master'][0]

- name: Check if k3s installation in 1st master succeeded
  shell:
    cmd: |
      JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
      kubectl get nodes -l "node-role.kubernetes.io/master=true" \
      -o jsonpath="$JSONPATH" | grep -o "Ready=True" | uniq | wc -l
  register: master_ready
  until: master_ready.stdout | int == 1
  retries: "{{ retry_count | default(10) }}"
  delay: 10
  changed_when: false
  when: inventory_hostname == groups['master'][0]

- name: Install k3s on rest of masters
  command: "/tmp/k3s_install.sh server {{ server_args }}"
  environment:
    INSTALL_K3S_VERSION: "{{ k3s_version }}"
  register: other_master_ready
  changed_when: true
  until: other_master_ready is not failed
  retries: 5
  when: inventory_hostname != groups['master'][0]

- name: Verification
  when: not ansible_check_mode
  block:
    - name: Check if k3s cluster is ready
      shell:
        cmd: |
          JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'
          kubectl get nodes -l "node-role.kubernetes.io/master=true" \
          -o jsonpath="$JSONPATH" | grep -o "Ready=True" | wc -l
      register: masters_ready
      until: masters_ready.stdout | int == (groups['master'] | length)
      retries: "{{ retry_count | default(10) }}"
      delay: 10
      changed_when: false
  always:
    - name: Save logs of k3s.service
      include_tasks: fetch_k3s_logs.yml
      when: log_destination
      vars:
        log_destination: >-
          {{ lookup('ansible.builtin.env', 'ANSIBLE_K3S_LOG_DIR', default=False) }}

- name: Create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Configure kubectl cluster to {{ endpoint_url }}
  command: >-
    k3s kubectl config set-cluster default
      --server={{ endpoint_url }}
      --kubeconfig ~{{ ansible_user }}/.kube/config
  changed_when: true
  vars:
    # Deactivated linter rules:
    #   - jinja[invalid]: As of version 6.6.0, ansible-lint complains that the input to ipwrap
    #                     would be undefined. This will not be the case during playbook execution.
    # noqa jinja[invalid]
    endpoint_url: >-
      https://{{ apiserver_endpoint | ansible.utils.ipwrap }}:6443

- name: Create kubectl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Get contents of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests

- name: Get sub dirs of manifests folder
  find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

- name: Remove manifests and folders that are only needed for bootstrapping cluster so k3s doesn't auto apply on start
  file:
    path: "{{ item.path }}"
    state: absent
  with_items:
    - "{{ k3s_server_manifests.files }}"
    - "{{ k3s_server_manifests_directories.files }}"
  loop_control:
    label: "{{ item.path }}"
